# -*- coding: utf-8 -*-
"""face_recognition_data_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FPhkuKDnXBX_Un3tn4t4It5SDxAIDXZC
"""

#from google.colab import drive
#drive.mount('/content/gdrive', force_remount=True)

import os, sys
from os import listdir
from os.path import isfile, join
import cv2
import numpy as np
import pandas as pd
import random
from tensorflow.keras.utils import to_categorical

imgpath = './AFDB_face_dataset_sub'

folderls = [x[1] for x in os.walk(imgpath)][0]
nrows = 150
ncolumns = 150
channels = 3

#subset
random.shuffle(folderls)
folderls = folderls[:3]

train_data_path = []
test_data_path = []

for folder in folderls:
    currentpath = imgpath+'/'+folder
    imgls = [[currentpath+'/'+f,folder] for f in listdir(currentpath) if isfile(join(currentpath, f))]
    imgcount = len(imgls)
    random.shuffle(imgls)
    trainls = imgls[:int(imgcount*7/10)]
    testls = imgls[int(imgcount*7/10):]
    train_data_path = train_data_path+trainls
    test_data_path = test_data_path+testls

def read_and_process_image(img_list):
    data = []
    lable = []
    for img in img_list:
        data.append(cv2.cvtColor(cv2.cvtColor(cv2.resize(cv2.imread(img[0],cv2.IMREAD_COLOR),(nrows,ncolumns),interpolation=cv2.INTER_CUBIC),cv2.COLOR_BGR2GRAY),cv2.COLOR_GRAY2RGB))
        lable.append(folderls.index(img[1]))
    return data,lable
    
test_data,test_lable = read_and_process_image(test_data_path)

test_lable = np.asarray(test_lable) 
test_lable = to_categorical(test_lable)  

with open('face_test_lable_subset.npy', 'wb') as f:
    np.save(f, test_lable)

del test_lable

test_data = np.asarray(test_data) 
test_data  = test_data.astype('float32')/255

with open('face_test_data_subset.npy', 'wb') as f:
    np.save(f, test_data)

del test_data

train_data,train_lable = read_and_process_image(train_data_path)

train_lable = np.asarray(train_lable)
train_lable = to_categorical(train_lable)

with open('face_train_lable_subset.npy', 'wb') as f:
    np.save(f, train_lable)

del train_lable

train_data = np.asarray(train_data)
train_data  = train_data.astype('float32')/255

with open('face_train_data_subset.npy', 'wb') as f:
    np.save(f, train_data)

del train_data
